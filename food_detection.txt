from flask import Flask, jsonify, Response
import cv2
from ultralytics import YOLO
from collections import Counter
import requests

app = Flask(__name__)

# Load YOLO model
model = YOLO('best_float32.tflite', task='detect')  # Explicitly define the task

# Initialize camera
cap = cv2.VideoCapture(0)  # Use the correct camera index

# Configuration
imgsz = 640
conf_threshold = 0.2

def detect_and_count(frame):
    """Detect food and count the number of each type."""
    resized_frame = cv2.resize(frame, (imgsz, imgsz))
    results = model.predict(resized_frame, imgsz=imgsz, conf=conf_threshold)
    detected_classes = [results[0].names[int(box.cls[0])] for box in results[0].boxes]
    class_count = dict(Counter(detected_classes))
    return class_count

def get_recipe_recommendation(items):
    """Get recipe recommendation using Spoonacular API."""
    api_key = "e1dbdfdd119c41e6992f2875609ef8f3"  # Replace with your Spoonacular API key
    ingredients = ','.join(items)
    url = f"https://api.spoonacular.com/recipes/findByIngredients?ingredients={ingredients}&number=1&apiKey={api_key}"
    response = requests.get(url)
    if response.status_code == 200:
        recipes = response.json()
        if recipes:
            recipe_title = recipes[0]['title']
            recipe_link = f"https://spoonacular.com/recipes/{recipe_title.replace(' ', '-').lower()}-{recipes[0]['id']}"
            return f"{recipe_title}\nRecipe Link: {recipe_link}"
        else:
            return "No recipe found for the specified ingredients."
    else:
        return "Error fetching recipe."

@app.route('/detect', methods=['GET'])
def detect():
    """Detect food from the camera."""
    ret, frame = cap.read()
    if not ret:
        return jsonify({"error": "Unable to capture image from the camera"}), 500
    class_count = detect_and_count(frame)
    recipe = get_recipe_recommendation(class_count.keys())
    return jsonify({"detected_foods": class_count, "recipe": recipe})

@app.route('/video_feed')
def video_feed():
    """Video feed for the camera."""
    def generate():
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            ret, jpeg = cv2.imencode('.jpg', frame)
            frame = jpeg.tobytes()
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n\r\n')
    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)